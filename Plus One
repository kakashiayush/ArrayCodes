Question -- You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

Solution --

M1 -> 

class Solution {
    public int[] plusOne(int[] digits) {
        int[] result;
        int carryStopper = 1;
        int size = digits.length;
        for(int i= size - 1; i >= 0; i--){
            if(digits[i] != 9){
                carryStopper = 0;
                break;
            }
        }
        // if carry is there then 1 will always be the last value and carry otherwise value
        // will be overridden
        result = new int[size + carryStopper];
        result[0] = 1;
        int carry = 1;
        int sum = 0;
        for(int i = size-1; i >= 0; i--){
            sum = digits[i] + carry;
            result[i + carryStopper] = sum % 10;
            if(sum > 9){
                carry = 1;
            } else{
                carry = 0;
            }
        }
        return result;
    }
}


M2 --> Given by someone else on leetcode

for (int i = digits.length - 1; i >= 0; i--) {
	if (digits[i] < 9) {
		digits[i]++;
		return digits;
	}
	digits[i] = 0;
}

digits = new int[digits.length + 1];
digits[0] = 1;
return digits;
